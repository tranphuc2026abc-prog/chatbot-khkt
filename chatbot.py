# Ch·∫°y b·∫±ng l·ªánh: streamlit run web_chatboot.py
# ‚ÄºÔ∏è Y√™u c·∫ßu c√†i ƒë·∫∑t: pip install groq

import streamlit as st
from groq import Groq
import os

# --- B∆Ø·ªöC 1: L·∫§Y API KEY (ƒê·ªïi sang Groq) ---
# L·∫•y key t·ª´ https://console.groq.com/keys
import streamlit as st
api_key = st.secrets["GROQ_API_KEY"] 
# --- B∆Ø·ªöC 2: THI·∫æT L·∫¨P VAI TR√í (SYSTEM INSTRUCTION) ---
SYSTEM_INSTRUCTION = (
    "B·∫°n l√† 'Chatbook' - m·ªôt C·ªë v·∫•n H·ªçc t·∫≠p Tin h·ªçc AI to√†n di·ªán, v·ªõi ki·∫øn th·ª©c c·ªët l√µi c·ªßa m·ªôt "
    "gi√°o vi√™n Tin h·ªçc d·∫°y gi·ªèi c·∫•p qu·ªëc gia, n·∫Øm v·ªØng ch∆∞∆°ng tr√¨nh GDPT 2018. "
    "Nhi·ªám v·ª• c·ªßa b·∫°n l√† h·ªó tr·ª£ h·ªçc sinh THCS/THPT m·ªôt c√°ch to√†n di·ªán. "
    "B·∫°n c√≥ 6 nhi·ªám v·ª• ch√≠nh: "
    
    "1. **Gia s∆∞ Chuy√™n m√¥n (L√Ω thuy·∫øt):** Gi·∫£i ƒë√°p m·ªçi th·∫Øc m·∫Øc v·ªÅ l√Ω thuy·∫øt m√¥n Tin h·ªçc "
    "(t·ª´ l·ªõp 6-12) m·ªôt c√°ch ch√≠nh x√°c, s∆∞ ph·∫°m, v√† ƒëi th·∫≥ng v√†o v·∫•n ƒë·ªÅ. "
    
    "2. **Mentor L·∫≠p tr√¨nh (Th·ª±c h√†nh Code):** Cung c·∫•p code m·∫´u (Python, C++, Pascal), "
    "h·ªó tr·ª£ g·ª° l·ªói (debug), t·ªëi ∆∞u h√≥a code, v√† gi·∫£i th√≠ch c√°c thu·∫≠t to√°n "
    "ho·∫∑c c·∫•u tr√∫c d·ªØ li·ªáu m·ªôt c√°ch tr·ª±c quan, d·ªÖ hi·ªÉu. "
    
    "3. **Ng∆∞·ªùi h∆∞·ªõng d·∫´n D·ª± √°n (S√°ng t·∫°o):** Gi√∫p h·ªçc sinh l√™n √Ω t∆∞·ªüng, x√¢y d·ª±ng k·∫ø ho·∫°ch "
    "cho c√°c d·ª± √°n h·ªçc t·∫≠p (v√≠ d·ª•: l√†m b√†i t·∫≠p l·ªõn, d·ª± √°n KHKT). "
    "Ch·ªß ƒë·ªông g·ª£i √Ω c√°c ch·ªß ƒë·ªÅ li√™n quan ƒë·∫øn b√†i h·ªçc. "
    
    "4. **Chuy√™n gia Tin h·ªçc VƒÉn ph√≤ng (·ª®ng d·ª•ng):** H∆∞·ªõng d·∫´n chi ti·∫øt c√°ch s·ª≠ d·ª•ng "
    "c√°c c√¥ng c·ª• Microsoft Office (Word, Excel, PowerPoint) ƒë·ªÉ √°p d·ª•ng v√†o b√†i h·ªçc, "
    "l√†m b√°o c√°o, thuy·∫øt tr√¨nh, hay x·ª≠ l√Ω d·ªØ li·ªáu. "
    
    "5. **Tr·ª£ l√Ω √în t·∫≠p (C·ªßng c·ªë):** Khi ƒë∆∞·ª£c y√™u c·∫ßu, b·∫°n s·∫Ω t·∫°o c√°c c√¢u h·ªèi tr·∫Øc nghi·ªám, "
    "c√¢u h·ªèi t·ª± lu·∫≠n, t√≥m t·∫Øt b√†i h·ªçc, ho·∫∑c gi·∫£i th√≠ch c√°c d·∫°ng b√†i t·∫≠p "
    "ƒë·ªÉ gi√∫p h·ªçc sinh c·ªßng c·ªë ki·∫øn th·ª©c tr∆∞·ªõc k·ª≥ thi. "
    
    "6. **C·ªë v·∫•n ƒê·ªãnh h∆∞·ªõng (T∆∞∆°ng lai):** Cung c·∫•p th√¥ng tin c∆° b·∫£n v·ªÅ c√°c ng√†nh ngh·ªÅ "
    "trong lƒ©nh v·ª±c CNTT, c√°c k·ªπ nƒÉng quan tr·ªçng c·∫ßn c√≥, v√† g·ª£i √Ω l·ªô tr√¨nh "
    "h·ªçc t·∫≠p ƒë·ªÉ c√°c em c√≥ c√°i nh√¨n s·ªõm v·ªÅ t∆∞∆°ng lai. "
    
    "Khi t∆∞∆°ng t√°c, h√£y lu√¥n gi·ªØ gi·ªçng vƒÉn chuy√™n nghi·ªáp nh∆∞ng th√¢n thi·ªán, "
    "t·∫≠p trung 100% v√†o n·ªôi dung ch∆∞∆°ng tr√¨nh 2018 v√† c√°c ·ª©ng d·ª•ng th·ª±c t·∫ø c·ªßa n√≥."
)
# --- B∆Ø·ªöC 3: KH·ªûI T·∫†O CLIENT V√Ä CH·ªåN M√î H√åNH (ƒê·ªïi sang Groq) ---

try:
    client = Groq(api_key=st.secrets["GROQ_API_KEY"])
except Exception as e:
    if "api_key" in str(e).lower() or "missing" in str(e).lower():
        st.error(f"L·ªói API Key: Vui l√≤ng ki·ªÉm tra l·∫°i GROQ_API_KEY ·ªü d√≤ng 11. L·ªói chi ti·∫øt: {e}")
    else:
        st.error(f"L·ªói khi c·∫•u h√¨nh API Groq: {e}")
    st.stop()

MODEL_NAME = 'llama-3.1-8b-instant'


# --- B∆Ø·ªöC 4: C·∫§U H√åNH TRANG V√Ä CSS ---
st.set_page_config(page_title="Chatbot Tin h·ªçc 2018", page_icon="‚ú®", layout="centered")
st.markdown("""
<style>
    /* ·∫®n thanh menu c·ªßa Streamlit */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
    
    /* T√πy ch·ªânh thanh b√™n */
    [data-testid="stSidebar"] {
        background-color: #f8f9fa; /* M√†u n·ªÅn sidebar */
        border-right: 1px solid #e6e6e6;
    }
    [data-testid="stSidebar"] [data-testid="stButton"] button {
        background-color: #FFFFFF;
        border: 1px solid #e0e0e0;
        color: #333; /* M√†u ch·ªØ n√∫t */
        border-radius: 8px;
    }
    [data-testid="stSidebar"] [data-testid="stButton"] button:hover {
        background-color: #f0f0f0;
        border: 1px solid #d0d0d0;
        color: #000;
    }

    /* Khu v·ª±c chat ch√≠nh */
    .main .block-container { 
        max-width: 850px; 
        padding-top: 2rem;
        padding-bottom: 5rem; /* Th√™m kho·∫£ng ƒë·ªám ·ªü d∆∞·ªõi */
    }
    .stButton>button { border: 1px solid #dfe1e5; }
    [data-testid="chatAvatarIcon-user"] { background-color: #C0C0C0; }
    .welcome-message {
        font-size: 1.1em;
        color: #333;
    }
</style>
""", unsafe_allow_html=True)


# --- B∆Ø·ªöC 4.5: (PH·∫¶N M·ªöI) THANH B√äN (SIDEBAR) ---
with st.sidebar:
    st.title("ü§ñ Chatbot KTC")
    st.markdown("---")
    
    # N√∫t "Cu·ªôc tr√≤ chuy·ªán m·ªõi"
    if st.button("‚ûï Cu·ªôc tr√≤ chuy·ªán m·ªõi", use_container_width=True):
        # X√≥a l·ªãch s·ª≠ chat hi·ªán t·∫°i
        st.session_state.messages = []
        # T·∫£i l·∫°i trang (ƒë·ªÉ x√≥a prompt kh·ªèi n√∫t b·∫•m n·∫øu c√≥)
        st.session_state.pop("prompt_from_button", None) 
        st.rerun()

    st.markdown("---")
    st.markdown(
        "Gi√°o vi√™n h∆∞·ªõng d·∫´n:\n"
        "**Th·∫ßy Nguy·ªÖn Th·∫ø Khanh** (GV Tin h·ªçc)\n\n"
        "H·ªçc sinh th·ª±c hi·ªán:\n"
        "*(B√πi T√° T√πng)*\n"
        "*(Cao S·ªπ B·∫£o Chung)*"
    )
    st.markdown("---")
    st.caption(f"Model: {MODEL_NAME}")

# --- K·∫æT TH√öC PH·∫¶N M·ªöI ---


# --- B∆Ø·ªöC 5: KH·ªûI T·∫†O L·ªäCH S·ª¨ CHAT ---
if "messages" not in st.session_state:
    st.session_state.messages = []

# --- B∆Ø·ªöC 6: HI·ªÇN TH·ªä L·ªäCH S·ª¨ CHAT (ƒê√£ s·ª≠a l·ªói th·ª•t l·ªÅ) ---
for message in st.session_state.messages:
    avatar = "‚ú®" if message["role"] == "assistant" else "üë§"
    with st.chat_message(message["role"], avatar=avatar):
        st.markdown(message["content"])

# --- B∆Ø·ªöC 7: M√ÄN H√åNH CH√ÄO M·ª™NG V√Ä G·ª¢I √ù ---

# L∆ØU √ù: D√≤ng 'import streamlit as st' th·∫ßy n√™n d·ªùi l√™n ƒê·∫¶U TI√äN c·ªßa file code nh√©!
import streamlit as st 

# --- PH·∫¶N TI√äU ƒê·ªÄ V√Ä LOGO (LU√îN HI·ªÇN TH·ªä) ---
# Em d·ªùi ph·∫ßn n√†y ra ngo√†i kh·ªëi 'if' ƒë·ªÉ n√≥ lu√¥n xu·∫•t hi·ªán
logo_path = "logo.jpg"
col1, col2 = st.columns([1, 5])  # T·ª∑ l·ªá 1:5 (logo nh·ªè, ti√™u ƒë·ªÅ l·ªõn)

with col1:
    st.image(logo_path, width=80)  # Hi·ªÉn th·ªã logo

with col2:
    st.title("KCT. Chat boot h·ªó tr·ª£ m√¥n Tin H·ªçc") # Ti√™u ƒë·ªÅ m·ªõi c·ªßa th·∫ßy

# --- H√ÄM H·ªñ TR·ª¢ N√öT B·∫§M (ƒê√É CHU·∫®N) ---
def set_prompt_from_suggestion(text):
    st.session_state.prompt_from_button = text

# --- HI·ªÇN TH·ªä M√ÄN H√åNH CH√ÄO V√Ä G·ª¢I √ù (CH·ªà KHI M·ªöI V√ÄO) ---
if not st.session_state.messages:
    # PH·∫¶N N√ÄY ƒê√É S·ª¨A L·ªñI TH·ª§T L·ªÄ:
    # 'st.markdown' (c√¢u ch√†o) v√† 'col1, col2' (n√∫t b·∫•m)
    # gi·ªù ƒë∆∞·ª£c th·ª•t v√†o B√äN TRONG 'if', v√† th·∫≥ng h√†ng nhau.
    
    st.markdown(f"<div class='welcome-message'>Xin ch√†o! Th·∫ßy/em c·∫ßn h·ªó tr·ª£ g√¨ v·ªÅ m√¥n Tin h·ªçc (Ch∆∞∆°ng tr√¨nh 2018)?</div>", unsafe_allow_html=True)
    st.markdown("<br>", unsafe_allow_html=True)

    col1_btn, col2_btn = st.columns(2) # ƒê·ªïi t√™n bi·∫øn ƒë·ªÉ kh√¥ng tr√πng v·ªõi col1, col2 ·ªü tr√™n
    with col1_btn:
        st.button(
            "Gi·∫£i th√≠ch v·ªÅ 'bi·∫øn' trong l·∫≠p tr√¨nh?",
            on_click=set_prompt_from_suggestion,
            args=("Gi·∫£i th√≠ch v·ªÅ 'bi·∫øn' trong l·∫≠p tr√¨nh?",),
            use_container_width=True
        )
        st.button(
            "Tr√¨nh b√†y v·ªÅ an to√†n th√¥ng tin?",
            on_click=set_prompt_from_suggestion,
            args=("Tr√¨nh b√†y v·ªÅ an to√†n th√¥ng tin?",),
            use_container_width=True
        )
    with col2_btn:
        st.button(
            "S·ª± kh√°c nhau gi·ªØa RAM v√† ROM?",
            on_click=set_prompt_from_suggestion,
            args=("S·ª± kh√°c nhau gi·ªØa RAM v√† ROM?",),
            use_container_width=True
        )
        st.button(
            "T√≥m t·∫Øt b√†i 6 Tin 12 (KNTT)?",
            on_click=set_prompt_from_suggestion,
            args=("T√≥m t·∫Øt b√†i 6 Tin 12 (KNTT)?",),
            use_container_width=True
        )

# --- B∆Ø·ªöC 8: X·ª¨ L√ù INPUT (ƒê√£ s·ª≠a l·ªói) ---
prompt_from_input = st.chat_input("M·ªùi th·∫ßy ho·∫∑c c√°c em ƒë·∫∑t c√¢u h·ªèi v·ªÅ Tin h·ªçc...")
prompt_from_button = st.session_state.pop("prompt_from_button", None)
prompt = prompt_from_button or prompt_from_input

if prompt:
    # 1. Th√™m c√¢u h·ªèi c·ªßa user v√†o l·ªãch s·ª≠ v√† hi·ªÉn th·ªã
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user", avatar="üë§"):
        st.markdown(prompt)

    # 2. G·ª≠i c√¢u h·ªèi ƒë·∫øn Groq
    try:
        with st.chat_message("assistant", avatar="‚ú®"):
            placeholder = st.empty()
            bot_response_text = ""

            # 1. Chu·∫©n b·ªã list tin nh·∫Øn
            messages_to_send = [
                {"role": "system", "content": SYSTEM_INSTRUCTION}
            ]
            messages_to_send.extend(st.session_state.messages)

            # 2. G·ªçi API Groq v·ªõi ch·∫ø ƒë·ªô stream=True
            stream = client.chat.completions.create(
                messages=messages_to_send,
                model=MODEL_NAME,
                stream=True
            )
            
            # 3. L·∫∑p qua t·ª´ng "m·∫©u" (chunk) API tr·∫£ v·ªÅ
            for chunk in stream:
                if chunk.choices[0].delta.content is not None: 
                    bot_response_text += chunk.choices[0].delta.content
                    placeholder.markdown(bot_response_text + "‚ñå")
            
            placeholder.markdown(bot_response_text)

    except Exception as e:
        with st.chat_message("assistant", avatar="‚ú®"):
            st.error(f"Xin l·ªói, ƒë√£ x·∫£y ra l·ªói khi k·∫øt n·ªëi Groq: {e}")
        bot_response_text = ""

    # 3. Th√™m c√¢u tr·∫£ l·ªùi c·ªßa bot v√†o l·ªãch s·ª≠
    if bot_response_text:
        st.session_state.messages.append({"role": "assistant", "content": bot_response_text})

    # 4. Rerun n·∫øu b·∫•m n√∫t (ƒê√£ s·ª≠a l·ªói c√∫ ph√°p)
    if prompt_from_button:
        st.rerun()